#include <iostream>
#include <sstream>
using namespace std;

class Fraction {
    // This is where we define what a fraction is and how to work with it. 
private:
    int numerator;
    int denominator;

    int gcd(int a, int b) const;
    int lcm(int a, int b) const;
    void reduce();
    
}

public:
    // Constructor
    Fraction(int num, int den) : numerator(num), denominator(den) {
        if (den == 0) {
            cout << "Denominator cannot be equal to zero" << endl;
        }
        reduce();
        // Consider validating that denominator is not 0
    }

    // Overloaded addition operator
    Fraction operator+(const Fraction& other) {
       // Find the LCD
       int commonDen = lcm(denominator, other.denominator);

       // Adjust numerators to match the new common denominator
       int num1 = numerator * (commonDen / denominator);
       int num2 = other.numerator * (commonDen / other.denominator); 

       // Add the numerators
       int resultNum = num1 + num2;

       return Fraction(resultNum, commonDen);

        // TODO: Use LCM and LCD to add fractions correctly
        // Add comments explaining how you use LCD and LCM to add fractions
        // Steps:
        // 1. Find the least common denominator (LCD)
        // 2. Adjust both fractions to have this denominator
        // 3. Add the numerators
        // 4. Return the result as a new fraction
    };


    
    // Additional overloaded operators (students should implement these)
    // Overloaded subtraction operator
    Fraction operator-(const Fraction& other) {
         // Find the LCD
       int commonDen = lcm(denominator, other.denominator);

       // Adjust numerators to match the new common denominator
       int num1 = numerator * (commonDen / denominator);
       int num2 = other.numerator * (commonDen / other.denominator); 

       // Add the numerators
       int resultNum = num1 - num2;

       return Fraction(resultNum, commonDen);

        // TODO: Implement the subtraction logic
    }

    // Overloaded multiplication operator
    Fraction operator*(const Fraction& other) {
        int resultNum = numerator * other.numerator;
       
        int resultDen = denominator * other.denominator;
       // Add the numerators
       

       return Fraction(resultNum, commonDen);
        // TODO: Implement the multiplication logic
    }

    // Overloaded division operator
    Fraction operator/(const Fraction& other) {
        int resultNum = numerator / other.denominator;

        int resultDen = denominator / other.numerator;
        // TODO: Implement the division logic
        return Fraction(resultNum, resultDen);
    }

    // Overloaded equality operator (==)
    bool Fraction operator==(const Fraction& other) const {
        return (numerator * other.denominator) == (denominator * other.numerator);

        if (frac1 == frac2) {
            cout << "The freactions are equal" << endl;
        }
        else {
            cout << "The fractions are not equal" << endl;
    
        }
        // TODO: Check if two fractions are equal by comparing numerators and denominators
    }

    // Overload output operator (<<) for printing fractions
    friend ostream& operator<<(ostream& os, const Fraction& frac) {
        os << frac.numerator << "/" << frac.denominator;
        return os;
    }

    // TODO: Implement methods to read input from stdin (lecture topic)
}

// Helper function to calculate the GCD
    int Fraction::gcd(int a, int b) { 
        while (b != 0) { 
            int temp = b;
            b = a % b;
            a = temp;
            
        }
        return a;
    }
    // Function to calculate the LCM
    int lcm (int a, int b) {
        return (a * b) / gcd(a, b);

    }
    // Function to calcualte the LCD
    int lcd(int a, int b) { 
        return lcm(a, b);

    }

// Function to calculate Least Common Denominator (LCD)
int Fraction lcd(int a, int b) {
    return (a * b) / lcm(a,b);
    // TODO: Implement logic for LCD
}

// Function to calculate Least Common Multiple (LCM)
int Fraction lcm(int a, int b) {
        return (a * b) / gcd(a,b);

    // TODO: Implement logic for LCM
}

// Additional overloaded operators (you should implement these)
// Overloaded subtraction operator
Fraction Fraction::operator-(const Fraction& other) {
    // TODO: Implement the subtraction logic
}

// Overloaded multiplication operator
Fraction Fraction::operator*(const Fraction& other) {
    // TODO: Implement the multiplication logic
}

// Overloaded division operator
Fraction Fraction::operator/(const Fraction& other) {
    // TODO: Implement the division logic
}

int main() {
    string input1, input2, operator;

    cout << "Enter first fraction: "
    cin >> input1
    cout << "Enter operator: "
    cin >> operator;
    cout << "Enter secodns fraction: "
    cin >> input2;

    Fraction frac1 = Fraction parseFraction(input1);
    Fraction frac2 = Fraction parseFraction(input2);
    Fraction result;
    
    // TODO: Design an input file that matches the format x/y operator i/j
    // Example: 1/2 + 3/4 should output 5/4 or 1 and 1/4, depending on how you format the output.

    // Example usage (students should implement actual logic)
    Fraction frac1(1, 2);
    Fraction frac2(3, 4);

    Fraction resultAdd = frac1 + frac2;  // This should call the overloaded + operator
    Fraction resultSub = frac1 - frac2;
    Fraction resultMul = frac1 * frac2;
    Fraction resultDiv = frac1 / frac2;
    bool isEqual = (frac1 == frac2)

    
    cout << frac1 << '+' << frac2 << '=' << resultAdd << endl; // This will print the result
    cout << frac1 << '-' << frac2 << '=' << resultSub << endl;
    cout << frac1 << '*' << frac2 << '=' << resultMul << endl;
    cout << frac1 << '/' << frac2 << '=' << resultDiv << endl;
    return 0;
}
